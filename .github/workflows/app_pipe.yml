name: üì¶ CI/CD - Testes e Qualidade (TDD)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '40 17 * * 3'  # Toda quarta √†s 17:40 UTC

env:
  PYTHON_VERSION: '3.12'
  PIP_CACHE_DIR: ~/.cache/pip

jobs:
  lint-and-quality:
    name: üîç Lint e Qualidade de C√≥digo
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - uses: actions/cache@v4
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Instalar depend√™ncias Python
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
          pip install ruff isort pylint

      - name: Verificar Lint (Ruff)
        run: ruff check .

      - name: Verificar Imports (Isort)
        run: isort src/ --profile black

      - name: Verificar Qualidade (Pylint)
        run: |
          pylint src/ tests/ || echo "‚ö†Ô∏è Pylint encontrou problemas, mas o job continuar√°."

  test-and-upload:
    name: üß™ Testes + Upload Coverage
    runs-on: ubuntu-latest
    needs: lint-and-quality

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Instalar depend√™ncias Python e Codecov
        run: pip install -r requirements.txt -r requirements-dev.txt pytest pytest-cov codecov

      # Backend Unit Tests
      - name: Rodar testes backend (unit) com coverage
        run: |
          pytest --cov=src/backend --cov-report=xml:coverage-backend.xml tests/backend/unit/

      - name: Upload cobertura backend unit para Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage-backend.xml
          flags: backend,unit

      - name: Upload resultados backend unit
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./unit-backend.junit.xml
          flags: backend,unit

      # Backend Integration Tests
      - name: Rodar testes backend (integration) com coverage
        run: |
          pytest --cov=src/backend --cov-report=xml:coverage-backend-integration.xml tests/backend/integration/

      - name: Upload cobertura backend integration para Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage-backend-integration.xml
          flags: backend,integration

      # Frontend Unit Tests
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Instalar depend√™ncias frontend
        run: npm install

      - name: Rodar testes frontend (unit) com coverage
        run: npm run test -- --coverage --coverageReporters=lcov --coverageReporters=cobertura

      - name: Upload cobertura frontend unit para Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/cobertura-frontend.xml
          flags: frontend,unit

      # Frontend E2E Tests
      - name: Rodar testes frontend (e2e)
        run: npm run test:e2e -- --coverage --coverageReporters=cobertura

      - name: Upload cobertura frontend e2e para Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/cobertura-frontend-e2e.xml
          flags: frontend,e2e

      # Integration Tests (Full Stack)
      - name: Rodar testes de integra√ß√£o (full) com coverage
        run: |
          pytest --cov=tests/integration --cov-report=xml:coverage-integration.xml tests/integration/

      - name: Upload cobertura integra√ß√£o para Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage-integration.xml
          flags: integration

  security:
    name: üîê An√°lise de Seguran√ßa (Bandit)
    runs-on: ubuntu-latest
    needs: lint-and-quality

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Rodar Bandit
        run: |
          pip install bandit
          bandit -r src/ -ll -ii --skip B101 || echo "‚ö†Ô∏è Bandit encontrou problemas, mas o job continuar√°."

  create-issue-on-failure:
    name: üö® Criar Issue em caso de falha
    runs-on: ubuntu-latest
    needs: [lint-and-quality, test-and-upload, security]
    if: failure()

    steps:
      - name: Criar Issue no GitHub em caso de falha
        env:
          GH_TOKEN_ISSUES: ${{ secrets.GITHUB_TOKEN }}
          REPO: DiasPedroQA/bookmark-converter
          WORKFLOW: ${{ github.workflow }}
          RUN_ID: ${{ github.run_id }}
          ACTOR: ${{ github.actor }}
          BRANCH: ${{ github.ref_name }}
        run: |
          ISSUE_TITLE="üî¥ Falha na pipeline: $WORKFLOW"
          ISSUE_BODY="Pipeline falhou para o reposit√≥rio $REPO\n\nWorkflow: $WORKFLOW\nRun ID: $RUN_ID\nBranch: $BRANCH\nExecutado por: $ACTOR\n\nVerifique os logs para detalhes."
          curl -X POST -H "Authorization: token $GH_TOKEN_ISSUES" -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/$REPO/issues \
          -d "{\"title\": \"$ISSUE_TITLE\", \"body\": \"$ISSUE_BODY\"}" || echo "‚ö†Ô∏è Falha ao criar issue"
