name: TDD CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '40 17 * * 3'  # Toda quarta-feira √†s 17:40 UTC

env:
  PYTHON_VERSION: '3.12'

jobs:
  lint-and-quality:
    name: üîç Lint e Qualidade de C√≥digo
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Instalar depend√™ncias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
          pip install ruff isort pylint

      - name: Verificar Lint (Ruff)
        run: ruff check .

      - name: Verificar Imports (Isort)
        run: isort src/ --profile black

      - name: Verificar Qualidade (Pylint)
        run: pylint src/ tests/ || true

  test-linux:
    name: üêß Testes com Coverage (Linux)
    runs-on: ubuntu-latest
    needs: lint-and-quality

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Instalar depend√™ncias
        run: pip install -r requirements.txt -r requirements-dev.txt

      - name: Rodar testes + Coverage
        run: |
          coverage run -m pytest -v --maxfail=1 --disable-warnings
          coverage report -m
          coverage xml
          coverage html

      - name: Enviar Cobertura para Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          fail_ci_if_error: true

  test-windows:
    name: ü™ü Testes no Windows
    runs-on: windows-latest
    needs: lint-and-quality

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Instalar depend√™ncias e rodar testes
        run: |
          pip install -r requirements.txt -r requirements-dev.txt
          pytest

  test-macos:
    name: üçé Testes no macOS
    runs-on: macos-latest
    needs: lint-and-quality

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Instalar depend√™ncias e rodar testes
        run: |
          pip install -r requirements.txt -r requirements-dev.txt
          pytest

  security:
    name: üîê An√°lise de Seguran√ßa (Bandit)
    runs-on: ubuntu-latest
    needs: lint-and-quality

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Rodar Bandit
        run: |
          pip install bandit
          bandit -r src/ -ll -ii

  create-issue-on-failure:
    name: üö® Criar Issue em caso de falha
    runs-on: ubuntu-latest
    needs: [lint-and-quality, test-linux, test-windows, test-macos, security]
    if: failure()  # Executa somente se algum job anterior falhar

    steps:
      - name: Criar Issue no GitHub em caso de falha
        env:
          GH_TOKEN_ISSUES: ${{ secrets.GITHUB_TOKEN }}
          REPO: DiasPedroQA/HTMLReader
          WORKFLOW: ${{ github.workflow }}
          RUN_ID: ${{ github.run_id }}
          ACTOR: ${{ github.actor }}
          BRANCH: ${{ github.ref_name }}
        run: |
          ISSUE_TITLE="üî¥ Falha na pipeline: $WORKFLOW"
          ISSUE_BODY="Pipeline falhou para o reposit√≥rio $REPO\n\nWorkflow: $WORKFLOW\nRun ID: $RUN_ID\nBranch: $BRANCH\nExecutado por: $ACTOR\n\nVerifique os logs para detalhes."
          curl -X POST -H "Authorization: token $GH_TOKEN_ISSUES" -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/$REPO/issues -d "{\"title\": \"$ISSUE_TITLE\", \"body\": \"$ISSUE_BODY\"}"
